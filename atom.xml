<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://hugochougt.com/atom.xml" rel="self" type="application/atom+xml" /><link href="https://hugochougt.com/" rel="alternate" type="text/html" hreflang="zh-CN" /><updated>2023-05-07T15:03:00+00:00</updated><id>https://hugochougt.com/atom.xml</id><title type="html">Hugo Chou 周昌权</title><subtitle>Experienced software engineer with 10+ years in commercial app &amp; software dev. Launched 20+ apps incl. iOS/Android, WeChat Mini Programs &amp; websites</subtitle><author><name>Hugo Chou</name></author><entry><title type="html">ChatGPT Prompt 咒语吟唱入门</title><link href="https://hugochougt.com/blog/chatgpt-prompt-engineering-intro" rel="alternate" type="text/html" title="ChatGPT Prompt 咒语吟唱入门" /><published>2023-03-25T21:24:00+00:00</published><updated>2023-03-25T21:24:00+00:00</updated><id>https://hugochougt.com/blog/chatgpt-prompt-engineering-intro</id><content type="html" xml:base="https://hugochougt.com/blog/chatgpt-prompt-engineering-intro"><![CDATA[<p>网上有很多人分享 ChatGPT 的 prompt 模板，也有很多人通过视频来介绍 ChatGPT。但是如果不从根本上理解如何清晰、有效地给 ChatGPT 提 prompt，就不能高效地修改、应用这些模板，来满足自己的特殊需求。</p>

<p>要理解 prompt 咒语吟唱，首选的起点是查阅官方的 3 个在线文档：</p>

<ol>
  <li><a href="https://platform.openai.com/docs/guides/completion/introduction">Text completion</a></li>
  <li><a href="https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api">Best practices for prompt engineering with OpenAI API</a></li>
  <li><a href="https://platform.openai.com/examples">Examples</a></li>
</ol>

<p>以下内容是我根据官方的文档，结合自己的实际操作做的一些简单入门总结。</p>

<h2 id="吟唱咒语prompt的两个基本准则">吟唱咒语（Prompt）的两个基本准则</h2>

<ol>
  <li>清晰地表达您的需求，通过指令、示例或两者结合向 ChatGPT 展示您想要的结果；</li>
  <li>提供高质量的数据和准确的文字（不要有错别字），确保有足够的示例，并对示例进行校对。</li>
</ol>

<h2 id="建议和示例">建议和示例</h2>

<h3 id="1-先在咒语prompt的开头描述指令然后用--或--隔开指令和上下文">1. 先在咒语（Prompt）的开头描述指令，然后用 <code class="language-plaintext highlighter-rouge">###</code> 或 <code class="language-plaintext highlighter-rouge">"""</code> 隔开指令和上下文</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>总结以下内容的重点

Text: ###
{多段文本内容}
###
</code></pre></div></div>

<h3 id="2-尽可能具体详细地描述期望的内容包括结果长度格式文风等">2. 尽可能具体、详细地描述期望的内容，包括结果、长度、格式、文风等</h3>

<p>不建议❌：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>以《登高》为标写一首诗。
</code></pre></div></div>

<p>建议✅：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>以哀愁的口吻写一首七言唐诗，标题为《登高》，风格参考唐代诗人杜甫。
</code></pre></div></div>

<p>两个咒语的输出对比：</p>

<p><img src="/images/posts/chatgpt-prompt/promtp-with-comparison.png" alt="promtp-with-comparison" /></p>

<h2 id="3-通过示例阐述期望的输出格式">3. 通过示例阐述期望的输出格式</h2>

<p>不建议❌：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>提取以下内容的名字和门店名称

Text: {text}
</code></pre></div></div>

<p>建议✅：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>提取以下内容的名字和门店名称，以 Excel 表格输出

Excel 表头格式：序号、门店名称、名字

Text: ###
{多行文本}
###
</code></pre></div></div>

<p>下面截图示例的数据是我的一个朋友让我帮忙处理 100 多条不规则的文件名数据。</p>

<p><img src="/images/posts/chatgpt-prompt/prompt-with-output-format.png" alt="prompt-with-output-format" /></p>

<h2 id="4-减少空洞和不准确的描述">4. 减少“空洞”和不准确的描述</h2>

<p>不建议❌：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>产品的描述应该相当简短，仅需几句话，不要太多文字。
</code></pre></div></div>

<p>建议✅：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用 3 到 5 句话来描述产品。
</code></pre></div></div>

<p>更多咒语示例，可以查阅以下链接：</p>

<ul>
  <li><a href="https://flowgpt.com/">FlowGPT</a></li>
  <li><a href="https://prompts.fresns.cn/">ChatGPT 提示语</a></li>
  <li><a href="https://github.com/f/awesome-chatgpt-prompts">awesome-chatgpt-prompts</a></li>
</ul>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[网上有很多人分享 ChatGPT 的 prompt 模板，也有很多人通过视频来介绍 ChatGPT。但是如果不从根本上理解如何清晰、有效地给 ChatGPT 提 prompt，就不能高效地修改、应用这些模板，来满足自己的特殊需求。]]></summary></entry><entry><title type="html">历时四个月，完成赫尔辛基大学的 Web 编程课程</title><link href="https://hugochougt.com/blog/finished-full-stack-open-2020" rel="alternate" type="text/html" title="历时四个月，完成赫尔辛基大学的 Web 编程课程" /><published>2020-12-06T17:25:00+00:00</published><updated>2020-12-06T17:25:00+00:00</updated><id>https://hugochougt.com/blog/finished-full-stack-open-2020</id><content type="html" xml:base="https://hugochougt.com/blog/finished-full-stack-open-2020"><![CDATA[<p>6 月 8 日报名课程，跟着 <a href="https://fullstackopen.com/en/">Deep Dive Into Modern Web Development</a> 上的教材学习，把前九章内容的课后练习都完成，每周在作业系统里提交作业。历时四个月，终于获得课程完成证书，跟 Linus Torvalds 做了校友 XD 这一次学习旅程收获满满。</p>

<p><img src="/images/posts/certificate-of-full-stack-open.jpg" alt="Certificate of Completion" /></p>

<p>前九章的课后作业都一一记录到 <a href="https://github.com/hugochougt/fullstackopen2020">fullstackopen2020</a>。第十章只浅尝了把 React Native app 跑起来，就没有继续做了：<a href="https://github.com/hugochougt/rate-repos-app">[Part 10] React Native</a>。</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[完成 Deep Dive Into Modern Web Development 课程]]></summary></entry><entry><title type="html">二十九了</title><link href="https://hugochougt.com/blog/twenty-nine-years-old" rel="alternate" type="text/html" title="二十九了" /><published>2017-12-31T17:50:00+00:00</published><updated>2017-12-31T17:50:00+00:00</updated><id>https://hugochougt.com/blog/twenty-nine-years-old</id><content type="html" xml:base="https://hugochougt.com/blog/twenty-nine-years-old"><![CDATA[<p>生日跟元旦也就差两天，现在也 28 周岁了，按照满了周岁就是下一岁这个说法的话，现在自己就是 29 岁，是二十多岁的最后一年了。</p>

<h2 id="读书">读书</h2>

<p>今年看书真的不多，要吸取教训。2018 年的读书目标简单点吧，将注意力从网络上收回来，多花时间看看书。</p>

<h2 id="游戏">游戏</h2>

<p>年中的时候迷上了王者荣耀这款游戏，花了不少时间在上面，前后估计也打了七百多盘，三百小时有的了。当然沉迷的那段时间，跟中学时代一起玩过来的几位死党每晚开黑，也是一段快乐的时光。</p>

<h2 id="锻炼">锻炼</h2>

<p>今年的运动量算是一般般吧，没有上年多，跑步90公里，keep 上的锻炼量也不是很多。不过体重、体脂还控制在正常水平，没有像很多朋友那样变成一个胖子。</p>

<h2 id="工作">工作</h2>

<p>今年工作上继续有提升，职位变成技术经理了。不过编码的时间急剧减少，差不多有三分之一的时间在做客户需求沟通、原型制作、项目管理等工作。而这些工作在我看来，比编程累人多了。</p>

<p>这一年经手开发了 7 个项目，还有 3 个项目只到需求沟通阶段就停止。其中微信小程序开发的就占了 4 个，真的是小程序年了。</p>

<h2 id="日记">日记</h2>

<p>今年也有坚持每天在 Evernote 上简单地写日记。</p>

<hr />

<h2 id="展望">展望</h2>

<p>每年的目标，到最后都完成不了的啦。记在心里，然后默默地一点点实现吧。</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><category term="年度总结" /><summary type="html"><![CDATA[生日跟元旦也就差两天，现在也 28 周岁了，按照满了周岁就是下一岁这个说法的话，现在自己就是 29 岁，是二十多岁的最后一年了。]]></summary></entry><entry><title type="html">2016 辛苦了</title><link href="https://hugochougt.com/blog/had-a-long-year" rel="alternate" type="text/html" title="2016 辛苦了" /><published>2016-12-31T17:50:00+00:00</published><updated>2016-12-31T17:50:00+00:00</updated><id>https://hugochougt.com/blog/had-a-long-year</id><content type="html" xml:base="https://hugochougt.com/blog/had-a-long-year"><![CDATA[<h2 id="读书">读书</h2>

<p>今年也就读了二十本书，真正技术相关的也就《Ruby 元编程》和《SurviveJS - Webpack and React : From apprentice to master》这两本了，两本书都很好，是所在领域的入门好书。而非技术相关的书，推荐的就是张春的《一生里的某一刻》、詹宏志的《旅行与读书》和兰道尔.门罗的《那些古怪又让人忧心的问题》。</p>

<h2 id="锻炼">锻炼</h2>

<p>今年史无前例地健身了 100+ 天，虽然也没有锻炼出六块腹肌，但体重从年初的 65 KG，到现在能稳定保持在 60 KG 了。</p>

<p>主要的锻炼形式是跟着 Keep 做腹肌和俯卧撑的练习。今年跑了大概 180 公里，比上年的 150+ 又好了了一点。另外还是有继续打篮球。</p>

<p>12 月份开始学习花花式滑板。</p>

<h2 id="工作">工作</h2>

<p>工作上最重要的事情就是在公司内从中级开发升为了高级开发，也领导了好几个项目的开发，其中两个还是微信服务号。</p>

<p>8 月份从泰国旅游回来，9、10、11 月都忙得不可开交，加班也十分严重，真的辛苦了。</p>

<h2 id="日记">日记</h2>

<p>今年也有好好地坚持每天记日记，在写这篇总结的时候，翻了 Evernot 上的 366 条记录，感觉又活了一年:)</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[2016 年度总结]]></summary></entry><entry><title type="html">RSpec 使用一周小结（下）——使用 FactoryGirl 准备测试数据</title><link href="https://hugochougt.com/blog/using-rspec-for-one-week-part-two-factory-girl" rel="alternate" type="text/html" title="RSpec 使用一周小结（下）——使用 FactoryGirl 准备测试数据" /><published>2016-09-30T20:10:00+00:00</published><updated>2016-09-30T20:10:00+00:00</updated><id>https://hugochougt.com/blog/using-rspec-for-one-week-part-two-factory-girl</id><content type="html" xml:base="https://hugochougt.com/blog/using-rspec-for-one-week-part-two-factory-girl"><![CDATA[<p>八月下旬发布了 <a href="http://www.beansmile.com/blog/posts/using-rspec-for-one-week-part-one">RSpec 使用一周小结（上篇）</a>，文末预告了会有下篇介绍使用 FactoryGirl 准备测试数据，现在来了。</p>

<blockquote>
  <p>在自动化测试中，准备测试数据是最重要也是最麻烦的，因此我们需要一个好的管理工具来辅助生成测试数据。Rails 中的默认测试数据构件是 fixture，就是一堆 yml 文件，使用简单但不方便组织复杂的测试用例数据。
– Rain</p>
</blockquote>

<p>在这个前提下，我们使用了 <code class="language-plaintext highlighter-rouge">factory_girl</code> 这个gem，来做测试数据管理。</p>

<h2 id="在-rails-中安装-factorygirl">在 Rails 中安装 FactoryGirl</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="c1"># Provides Rails integration for factory_girl</span>
  <span class="c1"># https://github.com/thoughtbot/factory_girl_rails</span>
  <span class="n">gem</span> <span class="s1">'factory_girl_rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.7'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在我们 Beansmile 里，所有 Rails 项目的 <code class="language-plaintext highlighter-rouge">Gemfile</code> 都要求在 gem 前加上一句简介、源码地址，然后指定 gem version 。一句简介、源码地址可以方便其他同事了解 gem 的基本用途，以及快速找到 gem 的更多信息，指定 gem version 可以避免版本冲突。</p>

<p>默认放置 factories 的文件夹是 <code class="language-plaintext highlighter-rouge">test/factories</code>。如果你使用了 RSpec 作为测试框架，那默认的 factories 文件夹则是 <code class="language-plaintext highlighter-rouge">spec/factories</code>。后面我们讨论使用 FactoryGirl 都是在测试框架是 RSpec 的前提下。</p>

<p>如果你愿意，可以将所有的 factories 都定义在 <code class="language-plaintext highlighter-rouge">spec/factories.rb</code> 文件中。但是在 Beansmile 我们都不会这样做，而是将每个 factories 以模型名复数的形式，单独保存一个文件在 <code class="language-plaintext highlighter-rouge">spec/factories</code> 文件夹下。例如有 User 和 Article 模型，那对应的 facotry 则分别是 <code class="language-plaintext highlighter-rouge">spec/factories/users.rb</code> 和 <code class="language-plaintext highlighter-rouge">spec/factories/articles.rb</code>。</p>

<h2 id="用法">用法</h2>

<h3 id="定义-factories">定义 factories</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file: spec/factories/users.rb</span>
<span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="c1"># 根据 :user symbol 猜测使用 User model</span>
  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
    <span class="n">first_name</span> <span class="s2">"John"</span>
    <span class="n">last_name</span>  <span class="s2">"Doe"</span>
    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">"user</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com"</span> <span class="p">}</span> <span class="c1"># 只要模型中有唯一性验证，就可以使用序列。</span>
    <span class="n">admin</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="c1"># 指明使用 User model</span>
  <span class="n">factory</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">class: </span><span class="no">User</span> <span class="k">do</span>
    <span class="n">first_name</span> <span class="s2">"Admin"</span>
    <span class="n">last_name</span>  <span class="s2">"User"</span>
    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">"admin</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com"</span> <span class="p">}</span>
    <span class="n">admin</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="创建-factories">创建 factories</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 创建一个未保存到数据库的实例</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="c1"># not saved to db</span>

<span class="c1"># 创建一个已保存到数据库的实例</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="c1"># saved to db</span>

<span class="c1"># 返回一个包含用于创建 User 实例的相关属性的 hash</span>
<span class="n">user_attrs</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">attributes_for</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
<span class="c1"># =&gt; {:first_name=&gt;"John", :last_name=&gt;"Doe", :email=&gt;"user1@example.com", :admin=&gt;false}</span>

<span class="c1"># 覆盖 factory 字段的默认值</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">first_name: </span><span class="s2">"Joe"</span><span class="p">)</span>
<span class="n">user</span><span class="p">.</span><span class="nf">first_name</span>
<span class="c1"># =&gt; "Joe"</span>
</code></pre></div></div>

<h3 id="关联关系">关联关系</h3>

<p>假设有以下模型及关联关系：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app/model/user.rb</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:articles</span>
<span class="k">end</span>

<span class="c1"># File: app/model/article.rb</span>
<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>
</code></pre></div></div>

<p>那么在已经有 user factory 的前提下，可以使用以下简写方式创建 post 的 factory：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
    <span class="n">sequence</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">"Post title</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">"</span> <span class="p">}</span>
    <span class="n">user</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>也可以使用完整的写法关联对应的 factory，同时覆盖一些默认属性：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
    <span class="n">sequence</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">"Post title</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">"</span> <span class="p">}</span>
    <span class="n">association</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">factory: :user</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Writely"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">post</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span>
<span class="n">post</span><span class="p">.</span><span class="nf">user</span><span class="p">.</span><span class="nf">last_name</span> <span class="c1"># =&gt; "Writely"</span>
</code></pre></div></div>

<h3 id="transients">Transients</h3>

<p><code class="language-plaintext highlighter-rouge">transient</code> 可用来定义临时/假<em>属性</em>。用 <code class="language-plaintext highlighter-rouge">transient</code> 定义的是属性名字。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
    <span class="n">first_name</span> <span class="s2">"John"</span>
    <span class="n">last_name</span>  <span class="s2">"Doe"</span>
  <span class="k">end</span>

  <span class="n">transient</span> <span class="k">do</span>
    <span class="n">with_posts</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="n">after</span> <span class="ss">:create</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
    <span class="n">create_list</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">user: </span><span class="n">user</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="p">.</span><span class="nf">with_posts</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Usage:</span>
<span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">with_posts: </span><span class="kp">true</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="traits">Traits</h3>

<p><code class="language-plaintext highlighter-rouge">trait</code> 是用来定义特征<em>数据样例</em>的。用 <code class="language-plaintext highlighter-rouge">trait</code> 定义的是数据样例名字，命名一般是使用形容词或名词，如“未确认的(用户)”。</p>

<p><code class="language-plaintext highlighter-rouge">trait</code> 是非常实用的、用于 DRY 测试用例数据的方法，在测试过程中必定会用到，其用法有以下几种：</p>

<p>定义特殊用例，例如 <code class="language-plaintext highlighter-rouge">注册了没有但验证邮箱的用户</code> 、 <code class="language-plaintext highlighter-rouge">被锁定的用户</code> 。有些测试场景需要用到这些特殊特征的用户时，就可以使用 <code class="language-plaintext highlighter-rouge">trait</code> 来定义：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
      <span class="c1"># 默认用户是已经校验过的，confirmed_at 不为空</span>
      <span class="n">confirmed_at</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span> <span class="p">}</span>

      <span class="c1"># 注册了没有但验证邮箱的用户</span>
      <span class="n">trait</span> <span class="ss">:unconfirmed</span> <span class="k">do</span>
        <span class="n">confirmed_at</span> <span class="kp">nil</span>
      <span class="k">end</span>

      <span class="c1"># 被锁定的用户</span>
      <span class="n">trait</span> <span class="ss">:locked</span> <span class="k">do</span>
        <span class="n">locked_at</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Usage:</span>
  <span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:unconfirmed</span>
  <span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:locked</span>
</code></pre></div></div>

<p>可组合使用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="n">traits</span> <span class="p">[</span><span class="ss">:unconfirmed</span><span class="p">,</span> <span class="ss">:locked</span><span class="p">]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">trait</code> 可嵌套使用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="c1"># 正常用户用 `create :user`</span>
    <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
      <span class="n">confirmed_at</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span> <span class="p">}</span>

      <span class="c1"># 没验证邮箱的用户</span>
      <span class="n">trait</span> <span class="ss">:unconfirmed</span> <span class="k">do</span>
        <span class="n">confirmed_at</span> <span class="kp">nil</span>
      <span class="k">end</span>

      <span class="c1"># 没验证邮箱且注册了1个月以上的认为是“僵尸用户”</span>
      <span class="n">trait</span> <span class="ss">:zombie</span> <span class="k">do</span>
        <span class="n">unconfirmed</span>
        <span class="n">created_at</span> <span class="p">{</span> <span class="mi">31</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Usage:</span>
  <span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:zombie</span>
</code></pre></div></div>

<p>接受 <code class="language-plaintext highlighter-rouge">transient</code> 参数，例如有些用例指定“僵尸用户”的注册时间：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="no">FactoryGirl</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="c1"># 正常用户用 `create :user`</span>
    <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
      <span class="n">confirmed_at</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span> <span class="p">}</span>

      <span class="c1"># 没验证邮箱的用户</span>
      <span class="n">trait</span> <span class="ss">:unconfirmed</span> <span class="k">do</span>
        <span class="n">confirmed_at</span> <span class="kp">nil</span>
      <span class="k">end</span>

      <span class="c1"># 没验证邮箱 且 注册了1个月以上的"僵尸"用户</span>
      <span class="n">trait</span> <span class="ss">:zombie</span> <span class="k">do</span>
        <span class="n">unconfirmed</span>
        <span class="n">created_at</span> <span class="p">{</span> <span class="mi">31</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span> <span class="p">}</span>

        <span class="n">before</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
          <span class="c1"># 如果有registered_at有值，就用来设置created_at</span>
          <span class="nb">self</span><span class="p">.</span><span class="nf">created_at</span> <span class="o">=</span> <span class="n">evaluator</span><span class="p">.</span><span class="nf">registered_at</span> <span class="k">if</span> <span class="n">evaluator</span><span class="p">.</span><span class="nf">registered_at</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Usage:</span>
  <span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:zombie</span><span class="p">,</span> <span class="ss">registered_at: </span><span class="mi">2</span><span class="p">.</span><span class="nf">months</span><span class="p">.</span><span class="nf">ago</span>
</code></pre></div></div>

<p>以上这些是我们最近在一个项目写测试时用到的 FactoryGirl 特性简介，对于其更多详细的用法，可以参考 <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">FactoryGirl Getting Started</a>。</p>

<p><strong>20160923 Edited</strong>:</p>

<p>Rain 提供了 <code class="language-plaintext highlighter-rouge">Transients</code> 和 <code class="language-plaintext highlighter-rouge">Traits</code> 两部分的说明及代码示例。</p>

<p>P.S. 首发于 <a href="http://beansmile.com/blog">Beansmile 官方博客</a>，一周后转载于自己的博客。</p>

<h2 id="参考资料">参考资料</h2>

<ol>
  <li><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">FactoryGirl Getting Started</a></li>
  <li><a href="http://ricostacruz.com/cheatsheets/factory_girl.html">Cheatsheet for FactoryGirl</a></li>
</ol>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[八月下旬发布了 RSpec 使用一周小结（上篇），文末预告了会有下篇介绍使用 FactoryGirl 准备测试数据，现在来了。]]></summary></entry><entry><title type="html">RSpec 使用一周小结（上）</title><link href="https://hugochougt.com/blog/using-rspec-for-one-week-part-one" rel="alternate" type="text/html" title="RSpec 使用一周小结（上）" /><published>2016-08-20T15:30:00+00:00</published><updated>2016-08-20T15:30:00+00:00</updated><id>https://hugochougt.com/blog/using-rspec-for-one-week-part-one</id><content type="html" xml:base="https://hugochougt.com/blog/using-rspec-for-one-week-part-one"><![CDATA[<p>过去一个星期，在开发中使用 RSpec 对系统的 API 进行了功能测试。在这个过程中现学现用，Rain 和 MC 对我写的测试提出了很多评审建议，现在记录下来，跟大家分享。</p>

<h2 id="api-功能测试套路">API 功能测试套路</h2>

<ol>
  <li>setup data &amp; assert original state</li>
  <li>do something</li>
  <li>assert response</li>
  <li>assert new state</li>
</ol>

<p>例如要测试用户注册，那就要先断言系统中没有用户，用户注册成功后，再断言系统中多了一个新用户。</p>

<h2 id="测试代码-code-review-评论">测试代码 code review 评论</h2>

<h3 id="1-不要-hack-原生方法">1. 不要 hack 原生方法</h3>

<p>在测试 App API 的时候，有时候需要在请求头（或者其他地方）带上校验信息，为了不在每次请求的时候都重复准备校验信息，一开始我参考 <a href="https://github.com/ruby-china/ruby-china">ruby-china</a> 的做法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: https://github.com/ruby-china/ruby-china/blob/master/spec/support/api_v3_support.rb#L27</span>

<span class="p">[</span><span class="ss">:get</span><span class="p">,</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:put</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:head</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
  <span class="nb">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">EOV</span><span class="sh">
    def </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sh">(path, parameters = nil, headers = nil)
      # override empty params and headers with default
      parameters = combine_parameters(parameters, default_parameters)
      headers = combine_parameters(headers, default_headers)
      super(path, params: parameters, headers: headers)
    end
</span><span class="no">  EOV</span>
<span class="k">end</span>
</code></pre></div></div>

<p>然后就收到 Rain 的评审批注：</p>

<blockquote>
  <p>这是hacking， 不要直接hack原生的helper方法，而是使用扩展方式，例如这样 <code class="language-plaintext highlighter-rouge">api_post</code> 或者
ApiConsumer.config(app_config)
ApiConsumer.post()
建议这样，更方便测试不同的app_config，也可以为将来要做API的SDK做铺垫。</p>
</blockquote>

<p>后来 Rain 还为此写了个 mr：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">AppApiV1Support</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
  <span class="n">included</span> <span class="k">do</span>
    <span class="c1"># usage example:</span>
    <span class="c1">#   let(:app_client) { api_consumer.config({id: '123', secret: '12345678'}) }</span>
    <span class="c1">#   app_client.post '/app_api/v1/consumers', consumer</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:api_consumer</span><span class="p">)</span> <span class="p">{</span> <span class="no">ApiConsumer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">ApiConsumer</span>
    <span class="nb">attr_accessor</span> <span class="ss">:api_config</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
      <span class="vi">@example</span> <span class="o">=</span> <span class="n">example</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">api_config</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">config</span><span class="p">(</span><span class="n">new_config</span><span class="p">)</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">api_config</span><span class="p">.</span><span class="nf">merge!</span><span class="p">(</span><span class="n">new_config</span><span class="p">)</span>
      <span class="nb">self</span>
    <span class="k">end</span>

    <span class="c1"># define request methods like get/post to send default headers</span>
    <span class="p">[</span><span class="ss">:get</span><span class="p">,</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:put</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:head</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
      <span class="nb">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">EOV</span><span class="sh">
        def </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sh">(path, parameters = nil, headers = nil)
          # merge headers with default
          headers = (headers || {}).merge(default_headers)
          @example.</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sh">(path, parameters, headers)
        end
</span><span class="no">      EOV</span>
    <span class="k">end</span>

    <span class="kp">private</span>
      <span class="k">def</span> <span class="nf">default_headers</span>
        <span class="p">{</span>
          <span class="s1">'App-Id'</span><span class="p">:</span> <span class="n">api_config</span><span class="p">[</span><span class="ss">:id</span><span class="p">],</span>
          <span class="s1">'App-Secret'</span><span class="p">:</span> <span class="n">api_config</span><span class="p">[</span><span class="ss">:secret</span><span class="p">],</span>
          <span class="s1">'App-Platform'</span><span class="p">:</span> <span class="n">api_config</span><span class="p">[</span><span class="ss">:platform</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'iOS'</span><span class="p">,</span>
          <span class="s1">'App-Os-Version'</span><span class="p">:</span> <span class="n">api_config</span><span class="p">[</span><span class="ss">:os_version</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'10.4'</span><span class="p">,</span>
          <span class="s1">'App-Version'</span><span class="p">:</span> <span class="n">api_config</span><span class="p">[</span><span class="ss">:version</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'1.0'</span>
        <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<h3 id="2-发送请求后记得-reload-内存中的对象再做断言">2. 发送请求后，记得 reload 内存中的对象再做断言</h3>

<p>项目有以下关联关系：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Device</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:consumer_device_relations</span><span class="p">,</span> <span class="ss">dependent: :destroy</span>
  <span class="n">has_many</span> <span class="ss">:consumers</span><span class="p">,</span> <span class="ss">through: :consumer_device_relations</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Consumer</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:consumer_device_relations</span><span class="p">,</span> <span class="ss">dependent: :destroy</span>
  <span class="n">has_many</span> <span class="ss">:devices</span><span class="p">,</span> <span class="ss">through: :consumer_device_relations</span>
<span class="k">end</span>
</code></pre></div></div>

<p>然后有以下测试：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s1">'binds device to a consumer'</span> <span class="k">do</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="nf">consumers</span><span class="p">).</span><span class="nf">not_to</span> <span class="kp">include</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>

  <span class="c1"># request to bind device to a consumer</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">200</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="nf">consumers</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如果不对 <code class="language-plaintext highlighter-rouge">device.consumers</code> reload 的话，最后一行的断言是会失败的。因为测试请求不会影响到内存中的对象。</p>

<p>正确的写法应该是：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">expect</span><span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="nf">consumers</span><span class="p">.</span><span class="nf">reload</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
</code></pre></div></div>

<p>也有另外的写法：<code class="language-plaintext highlighter-rouge">device.reload.consumers</code>。区别就是 <code class="language-plaintext highlighter-rouge">device.consumers.reload</code> 主要是测试 device.consumers 的变化，而 <code class="language-plaintext highlighter-rouge">device.reload.consumers</code> 主要测试 device 的变化。</p>

<h3 id="3-context-写到-it-的同级之后">3. context 写到 it 的同级之后</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bad</span>
<span class="n">describe</span> <span class="s1">'POST /api/v1/users'</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s1">'when email is missing'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s1">'when password does not match password_confirmation'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'creates a new user'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Good</span>
<span class="n">describe</span> <span class="s1">'POST /api/v1/users'</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s1">'creates a new user'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s1">'when email is missing'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s1">'when password does not match password_confirmation'</span> <span class="k">do</span>
    <span class="c1"># test code</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="4-一个-it-对应多个-expects-vs-每个-expect-对应一个-it">4. “一个 it 对应多个 expects” VS “每个 expect 对应一个 it”</h3>

<p>在测试用户授权设备的断言时，我是这样写的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s1">'authorizes the device'</span> <span class="k">do</span>
  <span class="c1"># test code</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">200</span>
  <span class="n">expect</span><span class="p">(</span><span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">({</span> <span class="s1">'authorized'</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="nf">reload</span><span class="p">.</span><span class="nf">authorized</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>然后 MC 评论：</p>

<blockquote>
  <p>这个it我一般分成3个it来写</p>
</blockquote>

<blockquote>
  <p>几年前看书是说分3个写的，这样有多少个错误就能真实反映出来了，不然可能出现修好了第一个断言后，继续跑测试第二个断言又出错了</p>
</blockquote>

<blockquote>
  <p>3个断言都有问题，如果写在一起，只会报一个错误</p>
</blockquote>

<blockquote>
  <p>而且输出的内容更直观，如 it ‘should get 200 code’,  it ’should include authorized params’</p>
</blockquote>

<p>Rain 回复：</p>

<blockquote>
  <p>是有推荐分3个写，但3个写会跑三次测试，有个性能问题。只要任何一个错，这个表示功能就是失败的，我们主要目标是让这个功能成功实现。如果3个测试1个出错，2个通过，会有这个功能2/3是正常的“错觉”，但实际这个功能就是不可用的</p>
</blockquote>

<p>最后因为测试比较简单，三个断言就写在了一个 it block 里。</p>

<p>当然有复杂的情况是分开写的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: spec/requests/web_api/v1/users_spec.rb</span>

<span class="n">describe</span> <span class="s1">'API V1'</span><span class="p">,</span> <span class="s1">'users'</span><span class="p">,</span> <span class="ss">type: :request</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:enterprise</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:enterprise</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>       <span class="p">{</span> <span class="n">enterprise</span><span class="p">.</span><span class="nf">owner</span> <span class="p">}</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="n">login_as</span> <span class="n">user</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s1">'GET /web_api/v1/users'</span> <span class="k">do</span>
    <span class="n">let!</span><span class="p">(</span><span class="ss">:user_b</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:enterprise</span><span class="p">).</span><span class="nf">owner</span> <span class="p">}</span>

    <span class="n">before</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">'/web_api/v1/users'</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s1">'responses 200 status code'</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">200</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">"gets enterprise's all users"</span> <span class="k">do</span>
      <span class="n">user_ids</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)[</span><span class="s1">'data'</span><span class="p">].</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">user</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="p">}</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">user_ids</span><span class="p">.</span><span class="nf">size</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">1</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user_ids</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">user_ids</span><span class="p">).</span><span class="nf">not_to</span> <span class="kp">include</span> <span class="n">user_b</span><span class="p">.</span><span class="nf">id</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这里有几个需要注意的地方：</p>

<ol>
  <li>let 语句后的 block 最好能对齐。</li>
  <li>需要用 <code class="language-plaintext highlighter-rouge">let!</code> 强制创建一个不在测试企业内的用户，以确保断言的时候不会因为 <code class="language-plaintext highlighter-rouge">user_b</code> 还没创建，使得测试不像预期那样通过。</li>
</ol>

<h2 id="其他用到的测试相关-gem">其他用到的测试相关 gem</h2>

<ol>
  <li><a href="https://github.com/thoughtbot/factory_girl_rails">factory_girl_rails</a>: 基本上使用 RSpec 测试的，都会同时使用 FactoryGirl 来作为准备测试数据的 fixture 了。</li>
  <li><a href="https://github.com/bblimke/webmock">webmock</a>: 如果你测试的功能涉及到请求第三方的网络服务，那可以使用这个 gem。</li>
</ol>

<h2 id="一些参考资料">一些参考资料</h2>

<ol>
  <li><a href="http://jakegoulding.com/presentations/rspec-structure/">Structure of RSpec tests</a></li>
  <li><a href="http://betterspecs.org/">Better Specs { rspec guidelines with ruby }</a></li>
  <li><a href="https://github.com/reachlocal/rspec-style-guide">The RSpec Style Guide</a></li>
</ol>

<p>更新说明：本文第一版先发于我自己的 blog，后来修改版本经 CTO Rain 审阅后，发布于 Beansmile 官方 blog：<a href="http://www.beansmile.com/blog/posts/using-rspec-for-one-week-part-one">RSpec 使用一周小结（上篇）</a>，然后再更新到这里。懂 Git 的读者可以 git log 一下本文的修改情况。</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[过去一个星期，在开发中使用 RSpec 对系统的 API 进行了功能测试。在这个过程中现学现用，Rain 和 MC 对我写的测试提出了很多评审建议，现在记录下来，跟大家分享。]]></summary></entry><entry><title type="html">记第一次长时间在国外旅游——泰国10日游流水账</title><link href="https://hugochougt.com/blog/my-first-time-travel-abroad-for-a-long-time" rel="alternate" type="text/html" title="记第一次长时间在国外旅游——泰国10日游流水账" /><published>2016-08-13T19:44:00+00:00</published><updated>2016-08-13T19:44:00+00:00</updated><id>https://hugochougt.com/blog/my-first-time-travel-abroad-for-a-long-time</id><content type="html" xml:base="https://hugochougt.com/blog/my-first-time-travel-abroad-for-a-long-time"><![CDATA[<p>公元2016年8月5日至14日这段时间，和三个小伙伴一行四人在泰国旅游了10天。这是我自己人生中第一次旅游这么长的时间，也是第一次出国旅游。（因为没有征求过同行三位朋友的意愿，出于隐私和方便行文描述，就给他们 Z、L、P 这三个代号吧。当然更不会贴出他们的照片。）</p>

<p>对我本人没兴趣的读者请直接 <code class="language-plaintext highlighter-rouge">CTRL + W</code> 关闭网页，因为本文将会是我这10天旅程的一个流水账，不是攻略，只是做一个记录，是写给我自己的，所以不会考虑你的阅读感受。[微笑]</p>

<p>本来自己是不想写这个流水账的，但是泰国8月12、13日这两天母亲节，原来计划游览的大皇宫不开门。加上在曼谷入住的 Lemontea Hotel 附近除了 Siam Center、Siam Discovery、Siam Paragon 几个超大商场外，没有太多我可以逛的地方，只能在酒店附近找间星巴克坐下，写下这次旅程的流水帐来打发时间了。</p>

<p>还有一点促使我写下这次旅游经历的原因是，采铜在《精进：如何成为一个很厉害的人》中给出了延长旅游收益半衰期的三点建议：</p>

<ol>
  <li>旅游前做足功课，对游览地的文化、历史和地域特点做详细了解；</li>
  <li>在游览过程中细致入微，仔细观察当地风物；</li>
  <li>事后认真撰写游记。</li>
</ol>

<p>基于打发无聊时间和延长这第一次出国游的收益半衰期，才着手写下这篇流水账。</p>

<h2 id="day-1---85">Day 1 - 8.5</h2>

<p>出发当天订的是 8:45 的南航飞机。早上6点多起床，搭地铁去广州白云机场。到达机场后先是排队托运行李排错队，排到了国内出发的柜台。等在国际出发柜台办理完托运后，已经8点多了，工作人员直接跟我说，先生你过安检时可能要插一下队，不然赶不上登机。我一听就蒙了，赶紧跑步去登机。过了两道安检后，到达登机口的我发现排起了队，心这才安定下来。</p>

<p>上了飞机后又是一段小插曲。我在机舱走了两圈都没有找到我的座位。问了空姐才知道妈的老子坐头等舱！生平第一次坐头等舱啊！！！而且花的是经济舱的钱啊！！！位置超级宽啊！！！飞行途中经常有空姐送水、送果汁、送可乐啊！！！</p>

<p>激动得我赶在飞机起飞前在 Instagram 发了一条状态：</p>

<blockquote>
  <p>嗯？我坐在头等舱？</p>
</blockquote>

<p><img src="/images/posts/travel-abroad/ins-first-class.jpg" alt="Ins First Class" /></p>

<p>飞机于泰国当地时间10点20分落地了，超级准时。</p>

<p>准备了两千多人民币和一万的泰铢，以备入境检查，谁知道只看了护照但屁都没检就让我入境了。</p>

<p>出了机场，一切都显得那么新鲜，泰国人、泰文等等。在机场外徘徊想着怎么打车去酒店时，被一辆双条车搭讪，第一次在现实中用英文对话。问了去离机场5公里左右的 Cozy Inn Chiang Mai 酒店只要 50 Baht 后，就果断上车了。不过下车时多收了我10 Baht 作为小费。</p>

<p>11点多达到酒店，又用英文跟酒店员工 check in，终于和早我一天达到的三个小伙伴汇合了。</p>

<p>我安顿好行李后四人就出门觅食了，随便乱逛就逛到了行程上要吃的 Huen Phen。点了几个菜，第一次吃泰国菜，大家对那个味道都不习惯。</p>

<p>吃完饭就去逛了契迪龙寺。网上都说是免费进入参观，可是我们进入时却收了门票。入内游览后才看到告示说因为经费问题，从5月份开始收取每个人 40 Baht 的门票。</p>

<p>逛完契迪龙寺，就打双条车去宁曼路继续瞎逛。逛到三点多，就包双条车去清迈夜间动物园。在动物园里喂了散养的鹿，看了所谓的野生动物表演，坐车先后浏览食草和肉食动物观光区，长颈鹿、斑马等会追着车找人喂食。最后看了 tiger show。</p>

<p>晚上8点多就从动物园坐车回酒店。第一天的行程就结束了。</p>

<h2 id="day-2---86">Day 2 - 8.6</h2>

<p>习惯了早起，第二天7点半就起床了（其实已经是北京时间的8点半了）。在等他们三人起床的这段时间，自己在酒店房间外看了 RSpec 相关的视频，并写了公司进行中的项目相关测试代码。因为8月底有晋升高级工程师的考核，所以旅游也都带上了电脑，见缝插针地准备一下。</p>

<p><img src="/images/posts/travel-abroad/coding-at-cozy-inn.jpg" alt="Coding at Cozy Inn" /></p>

<p>我们慢吞吞吃完早餐，就在路边包了辆双条车去素贴山逛双龙寺。四个人来回要800 Baht。上山的路九曲十三弯。不过司机很好人地主动在山腰的一个观景台停车，让我们拍了俯瞰清迈的风景照和合照。到达山顶后，走了三百多级的台阶，到达双龙寺。参观过程中还下起雨来，加上大雾，本来可以看到清迈全景的瞭望台，只能看到一片白雾。</p>

<p>在寺里逛了一个小时不到，11点多就坐车去宁曼路吃午饭。这个午饭就比较正常了，炸鸡、炒蔬菜等，还点了一碗中式的汤。吃完午饭他们三个还不满足，继续去 Mango Tango 吃甜品。而我就真的吃不下了，只蹭着吃了几口。吃完甜品就走路回 Cozy Inn 酒店。不料中途下起超级大雨，四人都淋得全身湿透。回到酒店洗完澡换了衣服，自己就在房间外继续学习 RSpec。</p>

<p>晚上去了清迈夜市逛吃逛吃，什么乱七八糟的东西看上了都买点往嘴里塞。最让我受不了的是整个夜市竟然没几个垃圾桶，吃完的袋子、盘子只能拿在手上。</p>

<p>逛吃的中途还遇上播放泰国国歌，真的是所有人都停下手中的事情，朝向国歌声源方向注视。播放泰国国歌时所有人要停下来这个规矩，是我从孤独星球上看来的。</p>

<p>吃饱喝足后就在路边的按摩店做脚部的马杀鸡。记忆中是一个人 80 Baht 按摩半小时，反正就是超级划算。我们按摩途中还有一对英美的夫妇，带着两个不到5岁的孩子也来按摩，两个小孩在按摩的时候一直有说有笑，一副很享受的样子。</p>

<p>做完马杀鸡从夜市回酒店的路上，还准备去酒吧喝酒吃宵夜，谁知道酒吧竟然说没酒了。那就只能打包吃的，然后去了711便利店买酒了。更让我们奇怪的是711也不卖酒了。上网查了才知道8月7日泰国公投新宪法草案，从6日下午开始全国禁酒。好傻的规定。</p>

<h2 id="day-3---87">Day 3 - 8.7</h2>

<p>Z 预先在淘宝上订了湄登大象营和丛林飞越（索道旅游项目），还有车来回接送。第三天7点匆匆忙忙地早餐都没有吃完，车子就来到酒店接我们了。</p>

<p>坐了一个多小时的车，才到达湄登大象营。第一个活动是骑大象，被大象托着走了一个小型山坡。也就10分钟的“象程”。骑完后到饲养棚喂食大象，那些大象好聪明，不是人未一个香蕉吃一个，而是先用鼻子搜集一堆香蕉后，才一次性地塞到嘴里吃下。饲养棚的对面是一条河流，有大象喷水表演。最后一个是比较长时间多头大象联合表演，有踢足球、画画、搬树干等。</p>

<p>10点多大象营的活动就结束了。然后又坐了一个多小时的车，去玩丛林飞越。进入丛林飞跃区域后，山路又弯又陡，坐在车里就觉得惊险。</p>

<p>12点多到达准备区后，先是吃了午饭，休息完等到2点左右，经过短暂的安全培训后，工作人员就和我们一起坐车继续上山准备丛林飞跃。</p>

<p>整个丛林飞跃有56还是57个点，时间持续了两个多小时。中间还有些垂直下降的索道，最后几个索道的滑行距离也比较长，600米、800米、900米等等。</p>

<p>一开始滑的时候还是挺害怕的，离地面几十米的距离，只有两根绳子吊着。玩了两三个点后就不怕了，不过陪着话索道的安全人员经常吓唬我们。中途还下起大雨。</p>

<p>4点多滑完后，车子送我们回到清迈古城已经7点多。在古城墙其中一个门前的 The Coffee Club 吃了晚饭。本来还说想逛周末夜市的，不过又因为公投，夜市暂停了。所以吃完饭随便乱逛了一会就回酒店了。</p>

<h2 id="day-4---88">Day 4 - 8.8</h2>

<p>继续7点多早起，在房间门口的桌子上学习 RSpec。</p>

<p>11点左右就打车去清迈机场，准备搭飞机到普吉岛。飞机延误了20分钟，1点半飞到4点左右落地。然后再坐了假的 mini bus 到 The Crib Patong 酒店。怎么知道是假的？因为中途被强制要求下车，接收了一些旅游项目推介。当然这是 Z 告诉我才知道。</p>

<p>到达酒店已经快下午6点了，而 Z 提前订的西蒙人妖 show 就是6点开始。Check in 后马上出门打车到西蒙人妖 show 的会场。所幸也只是迟到了5分钟，错过了一小部分开场表演而已。</p>

<p>整个表演持续了一小时，很用心的表演。非色情，小朋友也可以看。</p>

<p>看完表演就慢慢走路回酒店，晚饭在江西冷购物中心门口的一家日本料理搞定。然后还逛了下江西冷购物中心。</p>

<h2 id="day-5---89">Day 5 - 8.9</h2>

<p>Z ，没错还是 Z，提前在淘宝订了皇帝岛的浮潜项目。</p>

<p>7点起床，8点半车来了接我们去海边，然后再坐了半个多小时的船，10点半左右到了浮潜的皇帝岛。</p>

<p>浮潜了一个小时，在海水里游泳感觉超棒，海里还有很多鱼。浮潜完就在岛的另一边食午饭，吃完还是在海滩边逛。</p>

<p><img src="/images/posts/sea-phuket-thailand.jpg" alt="Sea of Phuket" /></p>

<p>下午2点左右自己继续在海边游水，游了差不多45分钟。到了写下这段流水账的8月16日，才发现自己后背晒到脱皮了。</p>

<p>3点从皇帝岛返航。回到酒店洗完澡，就在楼下的街边海鲜档食了龙虾、皮皮虾、蟹等海鲜。</p>

<p>晚上没事做，自己经过酒店附近的酒吧街，到海边吹海风。11点四个人还出去准备喝酒，后来只打了三盘台球。这间打台球的店，居然是按盘数来算钱的，20 Baht 一盘。一开始我还奇怪他们怎么知道我们打了几盘，开始打后才发现他们的桌球台进球后，球是被锁住的，要拿出来只能找工作人员的来开锁。打到凌晨一点多才回酒店睡觉。</p>

<h2 id="day-6---810">Day 6 - 8.10</h2>

<p>自己早起去了 Patong 的沙滩边赤脚跑步。终于达成在沙滩上跑一次步的成就。虽然后果就是脚的两个无名指都被夹得皮下出血了。</p>

<p>10点几四人一起在附近的星巴克吃早餐。吃完后走回酒店的几百米路上又遇上大雨，被迫躲雨十多分钟，在没那么大雨的时候才冒雨跑回酒店。</p>

<p>12点 check out 后就打的去订的另一间酒店，Sugar Marina Surf。Check out 的时候店员还问我们下一站去哪里，我随口回了句 another hotel，她说了什么我忘记了，大概意思就是很遗憾我们选了另外的酒店入住，hope to see us again。</p>

<p>走出酒店的门后是我在路边叫的车，一开始对方开价 600 Baht，我就随便问了句 500 行不行，OK 了就上车。</p>

<p>路上司机问我们接下来的行程，我们说第二天会去机场，他就推销说要不要继续包他的车，1200 Baht。我们四人讨论后继续讲价，还是要 1000 Baht。Z 说太贵，淘宝订车只要一百多人民币。</p>

<p>12点半到达 Sugar Marina Surf，但是要下午两点才能 check in。</p>

<p>午餐就在酒店外解决，中午吃得比较简单，而且我因为头痛，都没有吃多少东西。</p>

<p>Check in 后发现这间酒店的房间是这么多天住过的酒店里最大的，有阳台、有一张小圆桌、带浴缸的超大卫生间。终于有阳台可以晾衣服了。</p>

<p>下午3点多去 Kata Beach 玩，我租了个冲浪板玩了四十几分钟。冲浪超级累人，后来打字都手震。</p>

<p>关于冲浪的详细记录，写在了<a href="http://zhaqiang.github.io/2016/08/10/first-try-sports-on-sea/">第一次体验了有关大海的运动</a>。</p>

<p>晚上就吃了 trip advisor 上建议的 eightfold 餐厅，味道还不错。我还点了杯爱尔兰威士忌咖啡，喝下去感觉就是咖啡和白酒的混合物，有点烧喉。才想起 KFC 出品过的爱尔兰雪顶咖啡也是混了红酒的。以后都不喝爱尔兰咖啡了。</p>

<h2 id="day-7---811">Day 7 - 8.11</h2>

<p>早起去海边影相，但是没太阳加下起了大雨，9点多就回酒店呆着，继续看 RSpec。</p>

<p>11点 check out，在酒店门口的餐馆吃了饭，四人就坐预定的车去机场。</p>

<p>在机场值机的时候，因为人工值机的队伍实在太长，就尝试了自助值机和托运行李，真的快很多，因为自助窗口基本没人排队。候机和坐飞机时看了《Multitenancy with Rails - 2nd edition》。</p>

<p>下飞机后先是搭 A1 bus，到达 Victory Monument，然后转地铁。坐一站到 Phaya Thai，再走了一公里多才到达 Lemontea Hotel。</p>

<p>晚饭就是打包了 KFC 回酒店吃。吃完玩了阵手机就睡觉了。</p>

<h2 id="day-8---812">Day 8 - 8.12</h2>

<p>早上因为 P 和 L 身体都不舒服，只有我和 Z 去了逛曼谷文化艺术中心。看了几个摄影展，还在其中的一间书店里买了本泰英双语的小画册《<a href="http://www.matichonbook.com/index.php/matichonbook/indie-books/not-easy-being-me-a-life-of-bozo.html">Not Easy Being Me: A Life of Bozo</a>》。</p>

<p>逛完后就在一楼的 Gallery Drip Coffee 点了杯 drip coffee with milk，这是在泰国喝到的最合口味的咖啡了。而 Gallery Drip Coffee 这间咖啡店，是我在普吉岛飞曼谷的亚航上看到的杂志推荐的。</p>

<p>中午和 Z 在 Siam Center 五楼食了芒果饭。</p>

<p>下午自己去了四面佛那边逛，然后在附近的星巴克写 RSpec 测试。</p>

<p>晚上跟 Z、L 在 Siam Center 食晚饭。然后在 Siam Center、Siam Discovery 等几个大商场里瞎逛。还在Siam Center、Siam Discovery 之间的大空地上看了女子泰拳比赛。</p>

<h2 id="day-9---813">Day 9 - 8.13</h2>

<p>早餐吃了在泰国的第一餐街边早餐，瘦肉煮宽粉。然后打的去了曼谷市区的王权免税店逛。</p>

<p>逛的时候就奇怪，在市中心设个免税店，标语都写着商品比较其他地方便宜20%，为什么都是中国人在逛，没有当地的市民。问了同行的 Z，才知道在这里购物要办购物卡并出示护照，所以都是外国游客在逛。不能过安检的化妆品和酒等，还会给你送到机场，离境的时候再带上飞机。</p>

<p>自己买了些芒果干等零食作为给同事的手信。</p>

<p>从免税店出来，就坐地铁去了一个周末市场。那里就是一个小商品市场，各人买了瓶喝的，逛了10分钟左右大家都没兴趣，就又坐地铁回到市中心的 Siam Center 了。</p>

<p>中午在 Siam Center 吃了大食代。我一开始点了餐，以为他们没下单，又多点了一份海南鸡饭。当发现多点了后，才用蹩脚的英文叫他们 cancel 新点的海南鸡饭，好无奈。</p>

<p>吃完饭他们三人继续逛商场，而我因为昨天已经逛过一次，就在休息区睡觉等他们了。后来我太累就自己先回酒店休息。</p>

<p>六点在酒店附近的星巴克吃晚饭，这就回到我开始写这篇流水账的时间点了。</p>

<p>当拿到咖啡师给我的咖啡时，我赞美了一句：“It’s beautiful!”。那位金发咖啡师听了也笑了。</p>

<p><img src="/images/posts/travel-abroad/starbuck-coffee-lunch.jpg" alt="Starbuck Coffee Lunch" /></p>

<p>写到8点半左右就回酒店继续写。</p>

<h2 id="day-10---814">Day 10 - 8.14</h2>

<p>早上8点多四人一起离开酒店，临走前还用英文跟酒店工作人员要了4杯办理入住手续时喝过的柠檬茶。四人都一致觉得那个柠檬茶很好喝。Lemontea Hotel 这个名字果然没有叫错。</p>

<p>喝完柠檬茶后我就跟他们三人在酒店门口分别了。他们晚上凌晨的飞机飞回上海，所以他们还有时间去逛重新开放的大皇宫。而我是中午12点的飞机飞回广州，只能放弃这个最后的景点了。</p>

<p>托着行李走路去到 Phaya Thai，坐地铁一直到 Suvamabhumi Airport。这个机场超级大，出地铁后上了四五层楼才到达有值机柜台的楼层。排队等行李托运半小时，机场安检又半个多小时，排队领取退税的钱又是十多分钟。最后到达原定的 F3 登机口，又发现改到了 D8。</p>

<p>飞机泰国当地时间12点起飞，北京时间4点左右降落在广州白云机场，这趟10天的泰国之旅就完满结束了。</p>

<h2 id="感谢">感谢</h2>

<blockquote>
  <p>据说，两个人的旅游很多都是这样的：通常是一个人负责订来回车票酒店民俗景点门票计划好目的地路线行程衔接整体开销查看天气情况帖子攻略网友好差评想好怎么看怎么玩怎么吃问路带路，另一个负责当弱智。</p>
</blockquote>

<p>真的非常感谢 Z 安排的这次旅行，让我静静地当一个旅游弱智。而且跟着 Z 玩的这段时间，学到了很多旅行的知识，最重要的就是知道了什么旅游项目都可以上淘宝订，以后自己也可以尝试着独立旅游了。XD</p>

<p>本文从8月13日傍晚开始写，断断续续地写到8月17日晚11点多，第一次写跨度这么长的 blog。</p>

<h2 id="旅游的意义8月27日添加">旅游的意义（8月27日添加）</h2>

<p>其实我一直以来都没想过对旅游赋予什么特别的意义。包括这次的旅游，都没有发过微信朋友圈，只在 Instagram 上 po 了三张图。旅游就是自己的事，不是什么高大上的东西，没必要在 SNS 上到处“炫耀”。因为今年以来，已经在朋友圈里“旅游”了四五次泰国。</p>

<p>但是今天看到一篇文章说到旅行的意义：</p>

<blockquote>
  <p>旅行是一种让自己从例行公事般日常脱离，去体验另一种生活的机会。</p>
</blockquote>

<p>我觉得这说出了我对旅游的意义的理解。</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[公元2016年8月5日至14日这段时间，和三个小伙伴一行四人在泰国旅游了10天。这是我自己人生中第一次旅游这么长的时间，也是第一次出国旅游。（因为没有征求过同行三位朋友的意愿，出于隐私和方便行文描述，就给他们 Z、L、P 这三个代号吧。当然更不会贴出他们的照片。）]]></summary></entry><entry><title type="html">第一次体验了有关大海的运动</title><link href="https://hugochougt.com/blog/first-try-sports-on-sea" rel="alternate" type="text/html" title="第一次体验了有关大海的运动" /><published>2016-08-10T21:54:00+00:00</published><updated>2016-08-10T21:54:00+00:00</updated><id>https://hugochougt.com/blog/first-try-sports-on-sea</id><content type="html" xml:base="https://hugochougt.com/blog/first-try-sports-on-sea"><![CDATA[<p><img src="/images/posts/sea-phuket-thailand.jpg" alt="sea-phuket-thailand" /></p>

<p>8月8日至10日这三天，刚好在普吉旅游，趁机尝试了在中国内陆都没法进行的浮潜、在海边的沙滩上跑步以及冲浪。</p>

<p>8月9日一早，经过总共2小时的车程加船程，早上10点半左右到达皇帝岛浮潜的海域。在那里一共浮潜了1个小时。一开始还为了安全，穿着救生衣浮潜看鱼。后来大胆脱掉了救生衣，直接在海里游，不要太爽了！估计是海水的浮力比较大，在海里游泳比在游泳池游轻松好多。</p>

<p>10日继续起了个早，在 Patong Beach 沙滩上赤脚跑了25分钟，差不多3.5公里的路。然后脚底就果断受了伤。</p>

<p>下午到了 Kata Beach，租冲浪板冲浪。对于这人生第一次冲浪的准备工作，就是冲浪前30分钟上 YouTube 看了两个教学视频。因为第一次冲浪没有经验，只穿了条短的泳裤就上阵了。谁知道冲浪板的表面太粗糙，玩了几次下来，肚皮、胸口和膝盖等跟冲浪板接触频繁的部位，皮下都出现擦伤的痛感。玩了40多分钟，也就成功站起来了一次。后来实在痛得受不了，本来租了一小时的，提前了十多分钟还了冲浪板。冲浪完当时的体力还是很足的，但是回到酒店后双手玩手机发信息都在震。</p>

<p>以后有机会一定继续玩冲浪，被海浪从后往前的速度感真的好爽。</p>

<p>人生第一次冲浪的当天，写于 Sugar Marina Resort-SURF-Kata Beach 酒店内。</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[人生第一次在大海冲浪]]></summary></entry><entry><title type="html">基于腾讯云服务的 Rails 负载均衡部署方案简介</title><link href="https://hugochougt.com/blog/rails-loadbalance-deployment-based-on-qcloud-service" rel="alternate" type="text/html" title="基于腾讯云服务的 Rails 负载均衡部署方案简介" /><published>2016-07-29T20:32:00+00:00</published><updated>2016-07-29T20:32:00+00:00</updated><id>https://hugochougt.com/blog/rails-loadbalance-deployment-based-on-qcloud-service</id><content type="html" xml:base="https://hugochougt.com/blog/rails-loadbalance-deployment-based-on-qcloud-service"><![CDATA[<p>最近应客户要求，将网站的单机部署架构，改为了双机负载均衡架构，以提高整个系统的可用性。</p>

<h2 id="方案一自建方案">方案一、自建方案</h2>

<h3 id="11-负载均衡keepalived--nginx--haproxy">1.1 负载均衡：Keepalived + Nginx + HAproxy</h3>

<p>自建负载均衡方案的主要原理是，在每一处有单点故障风险的地方（如 Web server、Rails app server、数据库等），都使用 keepalived 配置至少两个独立进程，防止其中一个服务宕机后，导致整个网站不可访问。</p>

<p>参考资料：</p>

<ul>
  <li><a href="https://sleekd.com/general/keepalived_nginx_haproxy_thin_ruby_on_rails/">Setting up a High Availability Ruby on Rails environment with keepalived, nginx, HA Proxy and Thin on Debian Lenny</a></li>
  <li><a href="http://www.tokiwinter.com/building-a-highly-available-load-balancer-with-nginx-and-keepalived-on-centos/">Building a Highly-Available Load Balancer with Nginx and Keepalived on CentOS
</a></li>
  <li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-highly-available-web-servers-with-keepalived-and-floating-ips-on-ubuntu-14-04">How To Set Up Highly Available Web Servers with Keepalived and Floating IPs on Ubuntu 14.04</a></li>
</ul>

<h3 id="12-数据库高可用mysql-mha">1.2 数据库高可用：MySQL MHA</h3>

<p>MySQL 数据库高可用的架构，考虑到一般网站的访问量、对 down time 的要求和各种架构配置的复杂度，采用 <a href="https://code.google.com/p/mysql-master-ha/">MySQL MHA</a> 比较合适。</p>

<p>参考资料：</p>

<ul>
  <li><a href="http://blog.csdn.net/largetalk/article/details/10006899">MySQL HA方案: MHA</a></li>
  <li><a href="https://code.google.com/p/mysql-master-ha/wiki/Other_HA_Solutions">其他 MySQL 高可用方案及其问题</a></li>
  <li><a href="http://zhaqiang.github.io/mysql/high%20availability/2014/01/13/high-availability-solutions-for-mysql/">MySQL 高可用解决方案简介</a></li>
  <li><a href="http://blog.chinaunix.net/uid-20726500-id-5473292.html">如何防止HA集群的脑裂</a></li>
</ul>

<h3 id="自建方案架构图">自建方案架构图</h3>

<p><img src="/images/posts/self-build-network-design-chart.jpg" alt="自建方案架构图" /></p>

<h3 id="自建方案费用">自建方案费用</h3>

<p>单台 VPS：￥65元/月</p>

<p>最低费用：(Nginx/App Servers x 2 ＋ MySQL DBs x 2 + MHA Manager x 1) x ￥65元/月/台 = ￥325元/月</p>

<h3 id="优点">优点</h3>

<ul>
  <li>部署、运维人员对系统有完整的掌控权</li>
  <li>Keepalived 提供了失效切换的 callback 功能，可以在服务器宕机时执行脚本，例如发送通知邮件、尝试重启服务器等</li>
</ul>

<h3 id="缺点">缺点</h3>

<ul>
  <li>由于网络较为复杂，对部署、运维人员的能力要求较高</li>
  <li>相对方案二，硬件成本也比较高</li>
</ul>

<h2 id="方案二购买腾讯云服务方案推荐并且已实施的部署方案">方案二、购买腾讯云服务方案（推荐并且已实施的部署方案）</h2>

<h3 id="21-腾讯云负载均衡">2.1 <a href="https://www.qcloud.com/doc/product/214/%E6%A6%82%E8%BF%B0">腾讯云负载均衡</a></h3>

<p>费用：</p>

<ul>
  <li>负载均衡实例费用 ：公网有日租：1元/天</li>
  <li>负载均衡带宽费用：
    <ul>
      <li>云服务器按带宽计费：带宽消耗使用的是云服务器已包含的公网带宽，不另外收取带宽费用；</li>
      <li>云服务器按流量计费：用户使用公网负载均衡会产生出流量，需支付对应的流量费用。</li>
    </ul>
  </li>
</ul>

<p><a href="https://www.qcloud.com/doc/product/213/%E8%B4%AD%E4%B9%B0%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD">网络计费说明</a></p>

<h3 id="22-腾讯云的云数据库-cdb-for-mysql">2.2 腾讯云的<a href="https://www.qcloud.com/product/cdb.html">云数据库 CDB for MySQL</a></h3>

<p>费用：</p>

<ul>
  <li>推荐配置：高IO型，容量25GB，内存1000MB</li>
  <li>费用：112元/月/台</li>
</ul>

<h3 id="架构图">架构图</h3>

<p><img src="/images/posts/qcloud-service-network-design-chart.jpg" alt="腾讯云服务方案网络架构图" /></p>

<h3 id="最低费用总计">最低费用总计</h3>

<p>负载均衡实例费用30元/月/个 + 云数据库 CDB for MySQL 112元/月/台 + App Servers x 2 x 65元/月/台 = 272元/月</p>

<h3 id="优点-1">优点</h3>

<ul>
  <li>降低系统的配置、管理复杂度</li>
  <li>数据库实时双机热备，故障秒级切换。不需自建主从，自建 RAID（腾讯云数据库的产品说明）</li>
  <li>费用相对自建方案便宜</li>
</ul>

<h3 id="缺点-1">缺点</h3>

<ul>
  <li>腾讯云的负载均衡在检查到服务器失效后，没有提供 callback 的功能，导致在失效切换时不能进行一些自定义操作</li>
</ul>

<h2 id="结论">结论</h2>

<p>综合考虑费用、维护复杂度等因素，最终我们选择了方案二来实施双机负载均衡部署。</p>

<h2 id="遇到的问题">遇到的问题</h2>

<h3 id="问题一图片存储已解决">问题一：图片存储（已解决）</h3>

<p>原有的单机架构是使用 <code class="language-plaintext highlighter-rouge">carrierwave</code> gem 将图片存储在服务器本地，那在某个用户某次访问网站更新图片后，图片被存储在了服务器1上。假如后来服务器1宕机了，那图片就会丢失了。</p>

<p>解决办法就是使用<a href="https://www.qcloud.com/product/cos.html">腾讯云对象存储服务 COS </a>。迁移图片到腾讯云 COS 也费了点时间。我厂 CTO Rain 还为此写了支持腾讯云 COS 存储的 carrierwave gem 插件：<a href="https://github.com/rainchen/carrierwave-qcloud">carrierwave-qcloud</a>。</p>

<h3 id="问题二计划任务暂未解决">问题二：计划任务（暂未解决）</h3>

<p>使用 <code class="language-plaintext highlighter-rouge">capistrano</code> 结合 <code class="language-plaintext highlighter-rouge">whenever</code> 部署 Rails 的后台定时任务，crontab 配置只会生成在 db role 为 primary 的服务器，这里又是一个单点故障的地方。</p>

<p>计划任务这个单点故障的地方，因为时间关系在最终的部署方案里没有做成高可用架构。设想的方案是配合 redis 部署一个高可用的定时任务服务器。</p>

<p><em>P.S. 本文首发于 Beansmile 官方 blog <a href="http://www.beansmile.com/blog/posts/rails-loadbalance-deployment">基于腾讯云服务的 Rails 负载均衡部署方案简介</a>，一周后发布于我自己的 blog。</em></p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[最近应客户要求，将网站的单机部署架构，改为了双机负载均衡架构，以提高整个系统的可用性。]]></summary></entry><entry><title type="html">写给小朋友的多密码教程</title><link href="https://hugochougt.com/blog/password-101-for-kids" rel="alternate" type="text/html" title="写给小朋友的多密码教程" /><published>2016-01-31T18:28:00+00:00</published><updated>2016-01-31T18:28:00+00:00</updated><id>https://hugochougt.com/blog/password-101-for-kids</id><content type="html" xml:base="https://hugochougt.com/blog/password-101-for-kids"><![CDATA[<h3 id="确定-root-key">确定 root key</h3>

<p>选择任何一个你能记住的英文单词或者拼音作为 root key。当然你记不住单词的话，root key 可以用自己的名字拼音。</p>

<p>现在就假设 root key 是小明的拼音 <code class="language-plaintext highlighter-rouge">xiaoming</code> 吧。</p>

<h3 id="加上每个帐号的-special-key">加上每个帐号的 special key</h3>

<p>除了 root key 外，对于每个网站的密码，还需要加上唯一的 special key。可以是跟该网站相关的信息，例如网站域名（去掉 .com、.net 等后缀）或者创始人姓名拼音。然后这个 special key 加在 root key 的前面或者后面可以自己决定。</p>

<p>例如，对于淘宝，可以选域名 <code class="language-plaintext highlighter-rouge">taobao</code> 作为 special key，加在 root key 后面就是 <code class="language-plaintext highlighter-rouge">xiaomingtaobao</code>。</p>

<h3 id="密码转换规则">密码转换规则</h3>

<p>元音字母 <code class="language-plaintext highlighter-rouge">aeiou</code> 根据以下规则进行转换，括号里是助记说明。</p>

<ol>
  <li>a =&gt; 4 (A 的变体)</li>
  <li>e =&gt; 3 (E 的左右反过来)</li>
  <li>i =&gt; ! (英文的叹号，i 上下翻过来)</li>
  <li>o =&gt; 0 (数字零)</li>
  <li>u =&gt; 1_1 (两个数字1中间加个下划线，其实就是字母 u 的图画化)</li>
  <li>第一个以及最后一个非元音字母大写</li>
</ol>

<p>对前两步生成的 key，应用以上规则，淘宝网的密码就是 <code class="language-plaintext highlighter-rouge">X!40m!ngt40B40</code>。</p>

<p>-EOF-</p>]]></content><author><name>Hugo Chou</name></author><category term="blog" /><summary type="html"><![CDATA[确定 root key]]></summary></entry></feed>